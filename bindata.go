// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandstmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdd\x73\xdb\xb8\x11\x7f\x26\xff\x0a\x1c\x27\xb9\x21\x13\x99\xca" +
	"\x5d\x6f\xfa\xa0\x9e\x3a\x93\x38\x9f\x33\x17\xc7\xb5\x9d\xbb\x07\xd7\xd3\xc0\xe4\x4a\xc2\x18\x04\x68\x10\xf2\x47" +
	"\x75\xfc\xdf\x3b\x0b\x80\x24\x28\x52\xb2\x9d\xf6\xa5\x2f\x36\x4d\x80\xd8\xaf\xdf\xfe\x76\x17\x9e\x4e\xc9\xa1\xcc" +
	"\x81\x2c\x41\x80\xa2\x1a\x72\x72\x79\x4f\x64\x09\x82\x96\xec\x20\xe3\xec\xc0\x2d\x48\x95\x92\xb7\x5f\xc8\xd1\x97" +
	"\x33\xf2\xee\xed\xa7\xb3\x34\x9c\x4e\xc9\x29\x00\x59\x69\x5d\x56\xb3\xe9\x74\xc9\xf4\x6a\x7d\x99\x66\xb2\x98\xe6" +
	"\x54\x30\xe0\x4b\x4d\xef\xb9\x54\xd3\xd1\xb3\xc2\xb0\xa4\xd9\x15\x5d\x02\x29\x28\x13\x61\xc8\x8a\x52\x2a\x4d\xe2" +
	"\x30\xd8\x6c\x08\x5b\x90\xf4\x93\x79\x51\xa5\xef\x0b\x4d\xea\x3a\x5a\x14\x3a\xda\x6c\x08\x88\x9c\xd4\xf5\x60\xd3" +
	"\xa9\x56\x4c\x2c\x2b\xdc\x58\xd9\xc7\x3d\x9b\xcf\x58\x01\xb8\x53\xb3\x02\xbc\x6d\x61\x10\x3d\xcd\x84\x69\xc6\x59" +
	"\xd4\xff\xaa\xbc\x5a\x4e\x41\x29\xa9\xaa\xad\x05\x55\x4d\xff\x0d\x4a\x72\xb9\x9c\x72\xb9\xdc\x5a\xac\xca\xc5\x4f" +
	"\x7f\x99\x66\xf2\x52\xd1\xd1\x95\x1b\x56\x82\x32\x2b\xb2\xbc\x5a\xa6\x4c\x4c\x57\x3f\x0b\x29\xa6\x4b\x10\x9a\x43" +
	"\x41\x45\x7a\xf3\x73\x14\x26\x61\xb8\xd9\x90\x1c\x16\x4c\x00\x89\x4a\xaa\x68\x51\x45\xce\xfe\x03\xa2\xa8\x58\x02" +
	"\x49\xbf\x94\x9a\x49\x41\xf9\xb1\x59\x36\xab\x66\x99\x2d\x08\x5c\x93\xf4\xec\xbe\x04\x12\x5d\x4a\xc9\x81\x0a\xfb" +
	"\x71\x10\x64\x45\x9e\xbe\xe7\x74\x59\xc5\x49\xfa\x46\x4a\x1e\xa3\xd3\xd2\xc3\xdf\x3e\x1d\x51\xeb\xc8\x09\x59\x50" +
	"\x5e\xc1\x84\x98\x85\xb7\x50\x65\x8a\x19\x39\xb8\x98\x38\x09\xc0\x2b\xe8\x8b\x61\x42\xff\xf5\x97\x31\x21\x9f\x70" +
	"\x61\x44\xca\xab\xa7\x4a\x58\x70\x49\x77\xc8\x78\x6f\x97\xc6\xa4\xa4\x8f\x91\x33\x3c\xd1\x62\x70\xe4\xc0\x28\x7a" +
	"\xe0\xbc\x16\xa6\x07\x1d\x16\xbd\x98\xfd\x41\x99\x06\xe5\x82\x35\x0c\xc6\x2d\x65\xfa\x00\x8f\xb7\xfb\x76\x07\xc6" +
	"\xad\x9f\xae\x30\xd1\xac\xfc\x9e\xc8\x8c\xb3\xf4\x14\xf4\xe1\xba\xd2\xb2\xb0\x32\xb2\x22\x4f\xc2\x30\x60\x0b\xe2" +
	"\xcb\xfd\x48\x2b\xf7\x48\x36\x61\x10\x58\xa8\xa5\x6f\x98\xc8\x8f\xdb\xcf\x9a\xcd\x49\x18\xd4\xa1\x97\x64\x9b\x0d" +
	"\x79\x26\x50\xbd\xd9\x9c\xa4\x4e\x4f\xf3\x92\x96\xcc\xbc\xfb\x20\xb7\xde\x1e\xaf\x2f\x39\xcb\xcc\x9a\x7d\xec\x76" +
	"\x84\x37\x54\x91\xe6\xe3\xba\x3e\x5d\x5f\x66\xb2\x28\xa8\xc8\x09\x42\x38\x0c\x17\x6b\x91\xf9\xeb\xa0\x6e\x40\xa1" +
	"\xda\xe7\x17\x05\x2d\xcf\x2d\x55\x5c\xd8\x5f\x68\x8a\x02\xbd\x56\x62\x6c\x75\x63\x62\xe5\x22\xf2\xac\x32\x07\x19" +
	"\x95\xdc\x99\x0e\x0f\xa3\xdf\x05\x41\x94\x77\x91\x8f\x66\x26\x1a\xee\x8c\x6d\x4c\x4c\xec\xfe\xb5\xe2\x5b\xfb\xbe" +
	"\x9e\xfc\xd6\xae\xd7\x13\xab\x4d\x03\x9c\x3a\xb4\x8e\x75\xda\xc9\x12\xf9\x09\x0f\x44\x05\xbf\x34\x7f\x59\x1d\xa7" +
	"\x53\xd2\xf7\x6b\x5d\x23\x36\x5a\x9f\xe2\x6a\x0b\x91\x30\xf0\x3d\x38\xfe\x41\xdc\x0a\x4e\x4f\xe0\x7a\xcd\x14\xe4" +
	"\x2d\xb9\xf4\x4f\xb6\x1e\x99\x90\x56\x73\x0b\x1c\xf2\xc2\xf0\x5b\xfa\x3b\xfe\x74\x54\x7d\x48\xc5\x47\x7a\x03\x6f" +
	"\x64\x7e\x4f\xea\x7a\x42\x2e\xf1\xc1\x79\xb4\xf9\x3a\x21\xf1\x8b\x8e\x01\x4f\xa0\x2a\xa5\x40\xac\xa3\xd0\x13\x13" +
	"\x48\x43\x02\xf8\xb9\xa1\x64\x0b\xd6\x15\x15\x39\x07\x75\x4c\xf5\x0a\xdd\x63\x12\xe3\xa3\x7d\xd7\x64\x4d\x18\x20" +
	"\xe0\x47\x61\x65\xc2\xe9\x1f\x61\x4f\xb0\x88\xae\x6b\x12\x91\x97\xc4\x5b\x0e\x83\x00\x13\x2b\xe8\xf0\x62\x4d\xfd" +
	"\x00\xba\x61\x0b\xbb\x64\xb8\x80\x2d\x88\xdb\x38\x9f\x93\x28\xb2\xc2\x9a\x37\x63\x30\x3e\x6f\x4f\xfb\x24\x74\x73" +
	"\xd4\x01\x13\x39\xdc\x45\xc9\xc5\xb9\x41\xd1\x45\xa3\xc3\x5a\x71\x54\xc0\x6e\x7a\x69\xec\x36\x16\xa0\xc1\x8e\x88" +
	"\x1c\x7e\xd8\x84\x3c\x33\xa1\x31\xf8\x19\x04\x15\xb5\xea\x4a\x86\xdd\x99\x7e\x12\x58\x72\xf4\xaa\xa1\x5a\x23\x6e" +
	"\xee\x42\x56\xa5\x27\x50\x72\x9a\x41\xbc\x56\xdc\x90\xd1\xb7\xcd\x37\x83\x0e\xf7\xb5\xf3\xfc\x66\xf3\xad\xfe\x66" +
	"\x68\xab\x5b\x6a\xe1\x33\x21\x3f\x25\x8d\xe8\x06\xf8\x7d\xfe\x0a\x14\x5c\xa3\xca\xc8\x63\x87\x9c\x81\xd0\x29\x5a" +
	"\xf9\x19\xf4\x4a\xe2\x96\x38\xc1\x2c\x42\x1d\x92\xb0\x97\xce\x8f\x32\x78\x68\xef\xf5\x1a\xd4\x7d\x6b\x30\x0a\x9f" +
	"\x13\x05\xd7\xe9\xeb\x3c\xff\x07\x2e\xd9\x52\xd0\x71\xf1\x88\x51\xce\x22\xbf\x74\x79\x02\x56\x40\x73\x50\xe3\x12" +
	"\x3e\x9a\xb5\xa7\x88\xe8\x7c\xe6\xb9\xec\x81\xd6\x20\xe8\x67\xf0\x6c\x4e\x1c\xd9\x7f\x00\x8d\x4b\x26\xc3\xfe\x24" +
	"\x9a\x69\x6e\xb8\x60\xbb\xf8\x19\xe1\x36\x99\xbc\x63\x7e\x30\x68\x36\x1f\x1f\x31\x6e\x48\xc7\x18\xe8\x35\x22\x43" +
	"\xff\x3e\xc2\xc1\x8b\x42\xa7\xa7\xa5\x62\x42\x2f\xe2\xe8\xf9\x8d\xf5\x87\xe7\x89\xa4\x95\xe2\xb7\x0a\x23\x9e\x7e" +
	"\x8c\xab\x9f\x20\xac\xf1\x7c\x30\x84\xec\x28\xdf\x39\xa7\x19\xd2\xfb\xa1\xa3\x82\x71\xad\x0e\xa5\xd0\x20\xf4\x01" +
	"\x7a\xb3\x69\x34\x3e\x43\xce\xa8\x63\xbf\x08\xfb\x84\xfc\xde\xf1\x0d\x9e\x99\x74\xaa\x78\x9a\x60\xd6\x58\x22\x7c" +
	"\x03\x0b\xa9\x20\xf6\x78\x6c\xe2\xc2\x3e\x41\xe1\x89\x4d\xb5\xaa\x34\xbc\x8a\x98\x40\x8d\xde\xca\xd8\x71\x18\xbe" +
	"\xfc\x61\x4e\x04\xe3\x56\x6d\x57\x54\x05\xe3\x13\xfb\xc3\x36\xc8\xe9\x1f\x8a\x96\x31\x28\x35\x21\x11\xa6\x1c\x54" +
	"\x9a\x2c\x28\xe3\x90\x1b\xd4\x18\x9d\xb0\xbc\xe7\x90\xc9\x1c\xf2\x21\xad\x87\x56\x1c\x6a\x92\x9e\x6a\xaa\xd7\x95" +
	"\x19\x63\x7e\x25\xbf\xbc\x7a\x65\x25\x3b\x65\x1c\x25\x7c\x15\x05\x55\xd5\x8a\xf2\xa6\x54\xc4\xd6\x88\x1f\x9d\x84" +
	"\xe4\x6f\x03\xd5\x1f\xa3\x7b\x7b\x2c\xc7\x26\x42\xb9\xb3\x7d\x53\x8c\xaf\x6b\x8b\xb9\xbd\x1e\x79\x87\xbf\x16\x71" +
	"\xf4\xf1\xec\xec\x98\x3c\xcf\x67\xe4\x79\x15\x4d\xb6\x0d\x6c\x5f\x98\x78\x26\xad\xaf\xe8\x42\x43\x6b\xab\x0d\xe4" +
	"\x6b\x7c\xb5\x2b\x8e\x68\x7a\x63\xb9\xf5\xa4\x3d\xc1\xb7\xbf\xf1\xfd\xdc\xae\x59\xb0\x0a\xe8\x05\x02\xdb\x78\x50" +
	"\x0b\x9a\xc1\xa6\xc6\x04\x4a\xe3\x41\xa4\x12\x9f\x7e\x1c\x53\x1b\x0f\xf4\xb4\x30\xbe\x18\x76\x8b\x8e\xa3\x6f\x4d" +
	"\xf3\x6a\x08\xda\xef\x87\x9f\xd4\x9f\xb4\xad\xd0\xff\xa2\x53\x49\x6c\xd4\x8c\xa3\xa8\xd6\x50\x94\x1a\xb5\x7b\x15" +
	"\x06\xc1\x42\x2a\xd2\xbc\xfa\xd5\x68\x67\xb5\x4f\x5f\xdb\x97\x55\x4b\x79\x6e\xd7\xcb\x97\xa1\xc5\x45\xcf\x1d\x0e" +
	"\xbb\x63\xd6\x75\x96\xfc\x37\x76\x0e\x0c\x4c\xbc\xac\x19\xcb\x83\x21\xfa\x0f\xe5\x9a\xe7\x44\x48\x4d\x32\xca\x39" +
	"\x71\x51\x6a\x3b\xd0\x06\xff\xf8\x13\x93\x99\x66\x7a\x4d\x39\xf1\x20\xd3\xac\x14\x54\x67\x2b\xdb\xb6\x07\x7e\x6d" +
	"\x36\xef\x5d\xe0\x3f\xdb\xe7\xa6\x36\x05\xf6\x34\xeb\x28\x8b\xfb\x0f\xa0\xcd\xa6\xdf\x29\x5f\xdb\xfc\x4e\x0d\x3f" +
	"\xde\x69\xc7\x8c\xa7\xc0\x21\xd3\x96\xc1\x5d\x29\x7b\xcd\xf9\x29\x68\x8d\x7d\x4a\x9c\xf4\x72\x62\xdc\x17\x8f\x71" +
	"\xc6\x12\x34\x69\x34\xbf\x41\x5d\xac\x23\x9c\x27\x02\xb3\xe4\xeb\x6d\x94\xb6\x15\xe6\x0c\x89\xd0\xe8\x77\x7e\x71" +
	"\x79\xaf\xc1\xa4\xd3\xbb\xbb\x12\x32\x0d\x39\xf9\x93\xd8\x92\x43\xa2\xe7\xd7\x98\x6d\xc9\xc4\xf9\xf4\x7b\xf4\xfd" +
	"\xc3\x69\x68\x7d\x8f\x8c\xb5\x56\xad\xa6\x6d\x8d\xb4\xab\xee\xac\xb6\x0f\x32\x8c\x84\x23\xb6\xfb\xaa\x2d\x9d\x5b" +
	"\xe2\x1a\x4e\xb3\x49\x4b\x32\x2a\xd0\x3f\x0a\x68\xb6\x22\x39\x54\x08\x4e\x52\x99\xa3\x2e\x21\xa3\xeb\x0a\xc8\xf3" +
	"\x8a\xb0\xca\x52\xdf\x20\x64\xfb\x7d\xd1\xaa\xe8\x4d\xe8\x41\x10\x5c\x2a\xa0\x57\xdd\x5a\x5b\x8d\x83\xba\xdf\x1a" +
	"\xe1\x5f\x9a\x15\x90\x9e\x72\x80\x32\xb6\x13\x3b\xa7\x58\x91\x5f\xd8\xf7\x90\x49\x91\xb7\x8c\x8b\x94\xe9\xb2\xfc" +
	"\xef\xf3\xbd\x69\xde\x77\xc9\x11\xdc\xc6\xd1\x67\x7a\xc7\x8a\x75\xd1\x9c\x50\x11\xb8\xcb\x00\x72\xbf\xfa\x75\x65" +
	"\x62\x8b\x15\xb7\xc6\xda\x13\x58\xb2\x0a\x99\xbe\xea\xcf\xbf\x66\xe0\x51\x52\xea\xa6\x2a\x9c\x48\xa9\xed\x34\x5f" +
	"\xf5\x47\x1a\xb3\x69\x4e\x7e\x34\x57\x50\xe9\xa1\x5d\x31\x9a\x7f\xad\x60\xd6\x1b\x71\xec\x04\x6a\x06\x44\xbb\x90" +
	"\x9e\xb9\xe6\xcf\xae\xfc\x26\xc5\x72\xe6\x30\xad\xae\x72\x79\x2b\xe2\xd1\xbb\x8f\x49\xd8\xf6\x20\xc3\x31\x6b\x4e" +
	"\xb4\x5a\x43\xe8\x17\xcd\x46\x7f\x37\x9b\xce\xb7\x64\xfb\x3b\x50\x85\x36\xaf\xf6\xe9\x10\x06\xf6\xa6\xc5\xb4\x60" +
	"\xbd\x5b\x16\x0c\x24\x7a\x6d\xa7\x47\x70\x43\xdf\x15\xf8\x3d\x31\xcc\x4f\x32\x50\x9a\x32\x41\xe0\x06\x84\x26\x52" +
	"\xb5\x00\xc7\xbe\x8a\xd8\xb0\x32\xb1\xf4\x1d\x16\xbd\xe1\x32\xbb\x42\x14\x40\xb6\x36\x0a\xa2\x1f\xd6\x15\x54\xa4" +
	"\x94\xb6\xb5\xd0\x92\x94\xa0\x98\xcc\x19\x52\xed\x3d\xc9\x56\x90\x5d\x7d\x87\xc4\xda\x05\x1c\x9b\x48\x67\x58\x8c" +
	"\xe6\x6c\x0d\x45\x3b\x0a\x6e\x60\x4b\xae\xbb\xfa\x69\x2e\x7f\xba\xd1\x16\xc1\x6d\x13\x31\x2b\xf2\x1d\x2e\xf4\x60" +
	"\x95\x7e\xad\x3a\xec\xb4\x13\x40\xfa\x9a\x33\x8a\xb6\xb7\x39\xec\x5e\xcc\xc8\x79\xef\x62\x25\xe8\x4d\x30\x83\xaf" +
	"\x82\xc0\xc8\xf0\x04\x6c\x77\xe4\xcd\x6d\xca\xc8\x82\x8f\xf1\xf6\xce\xcc\xed\xdd\x85\x72\x03\xbd\x06\xde\xa8\xb6" +
	"\x5a\x56\x33\x62\x3d\xf0\x99\x09\xcc\xf8\x23\x7c\x87\xe4\xc2\x41\xec\x2d\xd5\xcd\x19\x27\x6b\x31\x23\xe8\xf4\x18" +
	"\x3d\xfa\xa2\xe7\xce\x09\xa1\x6a\x59\xb5\x4e\x69\x82\xe2\xb7\xbe\x8f\x6c\x8e\x9e\xdd\xf5\x86\xe0\x3d\x7a\xa1\xc4" +
	"\x73\x3c\xf5\x8e\xd4\xf5\xc5\xb0\x87\x18\x69\xa3\x83\x20\xe0\x72\x99\xbe\xa7\x9a\xf2\x38\xc1\x9a\x80\x15\x28\x49" +
	"\x3f\x57\xcb\x38\x32\x15\xc2\x74\x0e\x88\xd0\xa4\x89\x4a\xe8\x07\xc7\xfe\x85\x7b\x7c\xd4\xba\xdb\x49\x4b\xe2\x48" +
	"\xa3\xdc\x94\xa4\xe6\xea\xbb\x33\xa2\x19\xbf\xe2\xa4\x7f\x71\xe6\x73\xff\x23\xef\xcf\xfa\xf0\x1f\x47\x7f\xd3\xd3" +
	"\xc0\x1d\x2d\x4a\x0e\x95\xeb\x27\xc3\x7e\x67\x03\x77\xe6\xfc\x77\xcd\x26\x87\xbb\xf6\xa3\x97\x73\x12\x11\x73\xa3" +
	"\xd4\x32\x9b\x33\x1c\x5b\xf9\x38\x21\x2f\x49\x64\xa2\xdb\xea\xeb\x92\xc9\xbc\x04\x8c\xce\x3f\x45\x34\x2c\x71\x7b" +
	"\xf2\x72\x47\x5a\xee\xca\xca\x9d\x49\xb9\x37\x27\x07\x29\xb9\x9d\x78\xf5\x64\x64\x74\xde\x97\x8e\x8f\xcc\xc6\xc6" +
	"\x8c\x8f\x2c\xcf\x41\xb4\xe2\xec\x9f\x33\xd3\x5b\xb4\x4b\xa3\x2a\xb8\x50\xcd\xda\xc0\xda\x5d\x0f\x26\xf9\xae\xd4" +
	"\xfe\x9e\xcc\x6e\x8c\x18\xde\x18\x04\x01\x0e\xf7\x13\x7f\xe4\xfd\x00\x1a\x37\xc4\xc3\x4b\x01\x7b\xfc\xf9\xb8\x86" +
	"\x75\x3d\xbb\x70\x79\x38\xda\x50\xee\x49\xe6\xaf\x82\x5e\x72\xc0\x5a\x85\x2d\x30\x2a\xd4\x64\x74\x3d\x60\x59\xbf" +
	"\xa3\x4c\x8f\x00\xf2\xaa\x99\xcc\x49\x5d\x63\xef\xde\x75\x72\xff\x6a\x21\xfc\xb8\xf9\xe8\x61\x82\x7b\x2a\xad\xed" +
	"\xb9\x98\xee\x6e\xa4\xbf\xcf\x67\x96\x00\x33\x77\x83\xb0\x35\x3b\xb5\x33\xc3\xd6\x6d\xc6\x7b\xa9\x0a\xec\x1d\x95" +
	"\x7b\x8a\xf7\xdc\x62\xec\x13\xee\xce\x41\xc9\xfe\x95\x45\x27\x76\xac\x3d\xb2\x6d\xfe\xf5\x71\xcb\x7e\x63\xa3\x54" +
	"\xd8\xa6\xf7\xe8\x3d\xab\x47\x5b\xa3\x37\xae\x3d\x19\xe7\xd1\xe0\xb2\x38\xba\x20\xf3\x16\xc4\xcf\xb0\x81\xbc\xe8" +
	"\x04\xf6\x10\xb6\x67\xf2\x1c\xc5\xe3\xf8\x3f\xde\x5c\x08\xba\xfb\xcf\x07\xff\xfb\xd6\x55\xe3\xe0\x76\x77\xa1\xe8" +
	"\xcb\x34\x28\xad\xcc\xc4\x23\x6d\xf3\x85\x4c\xe2\x77\x34\x4f\x1f\x7a\xbb\xf3\x4c\xe2\xb7\x4e\xdd\x9a\x75\x77\x43" +
	"\x77\x2f\x80\x1e\x1e\x7a\x7d\x34\xa1\x01\x6a\xd9\xa4\x19\x1a\x38\xbc\x47\xf5\x07\xda\xb1\x08\xf5\xff\x59\x91\x6f" +
	"\x3b\x6c\x80\xa2\xff\x7f\x97\x39\xf8\xa4\xa7\xa0\x0d\x97\x3f\x63\xb9\x23\xf1\x07\x5d\xb5\xbf\x11\x74\xa0\xdd\x45" +
	"\x97\x63\x40\xf4\xc2\xe7\x91\xe4\xed\xde\xe6\x6f\x8f\x2f\xdc\xbd\x80\x19\x8d\x3b\xe3\xeb\x7e\x17\xb8\x55\x87\x6d" +
	"\x75\x36\xcf\xdb\x83\x4c\xdb\x12\x8e\x77\x84\xee\x0a\x32\x4e\xfc\xde\xaf\x0e\xff\x13\x00\x00\xff\xff\x5d\xb1\xa7" +
	"\x91\x03\x23\x00\x00")

func bindataTemplatesCommandstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandstmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatesCommandstmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 8963,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1552262930, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMaintmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc3\x40\x10\x85\xcf\x3b\xbf\x62\xc8\x41\x12\xb0\x9b\x7a" +
	"\xed\xad\x68\x0e\x5e\xac\x88\x78\x5f\x37\x93\xed\x60\x76\x66\xd9\x6c\x4a\x25\xe4\xbf\x4b\x2a\xe2\xed\xbd\xf7\xf1" +
	"\x1e\x2f\x39\xff\xe5\x02\x61\x74\x2c\x00\x1c\x93\xe6\x82\x35\x98\x2a\x70\x39\xcf\x9f\xd6\x6b\x6c\x7b\x27\x4c\x63" +
	"\x28\xee\x7b\xd4\xdc\x6a\x22\x71\x89\x77\x7e\xe4\x5d\x20\xa1\xec\x8a\xe6\xd6\x8f\x5c\x41\x03\x30\xcc\xe2\x6f\x63" +
	"\x75\x83\x0b\x18\x3f\xb2\x7d\x16\x2e\xf5\xdd\xa6\x1e\x55\x06\x0e\x0b\x18\x73\x4c\xe9\xc5\x45\x3a\x20\x62\xb5\x2c" +
	"\x68\x37\x83\xeb\x5a\xdd\x83\x31\x9d\x5c\x5e\x33\x0d\x7c\x3d\xfc\xb3\x4e\x2e\x7f\xf8\x83\xf2\xc4\x2a\xb7\xea\x83" +
	"\xdd\xdb\xfd\x96\xae\x0d\x80\x69\x5b\x7c\x3f\x3d\x9d\x0e\x78\xec\x7b\xcc\x14\x78\x2a\x94\xd1\x6b\x8c\x4e\xfa\x09" +
	"\xcf\x94\xc9\xc2\xef\xa7\x37\xd5\x62\xbb\x2b\xf9\xb9\x50\xdd\xc0\x0a\x3f\x01\x00\x00\xff\xff\xd7\x90\x9c\xb4\x08" +
	"\x01\x00\x00")

func bindataTemplatesMaintmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMaintmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMaintmpl() (*asset, error) {
	bytes, err := bindataTemplatesMaintmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 264,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1538448749, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatesCommandstmpl,
	"templates/main.tmpl":     bindataTemplatesMaintmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatesCommandstmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMaintmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
