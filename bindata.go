// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/commands.tmpl
// templates/main.tmpl

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataTemplatesCommandstmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5b\x73\xdb\xb8\x15\x7e\x26\x7f\x05\x96\x93\xec\x90\x89\x4c\x65" +
	"\xb7\x3b\x7d\x50\x57\x9d\x49\x9c\xeb\xcc\x26\x71\x6d\x67\xf7\xc1\xf5\xd4\x10\x79\x24\x61\x4c\x02\x34\x08\xf9\x52" +
	"\x2d\xff\x7b\xe7\x00\x20\x09\x5e\x24\xcb\x69\x5f\xfa\xe2\x48\x3c\x20\xce\xfd\x3b\x17\x65\x3a\x25\xc7\x22\x05\xb2" +
	"\x02\x0e\x92\x2a\x48\xc9\xe2\x81\x88\x02\x38\x2d\xd8\x51\x92\xb1\x23\x4b\x10\x32\x26\x6f\xbf\x92\x2f\x5f\xcf\xc9" +
	"\xbb\xb7\x9f\xce\x63\x7f\x3a\x25\x67\x00\x64\xad\x54\x51\xce\xa6\xd3\x15\x53\xeb\xcd\x22\x4e\x44\x3e\x4d\x29\x67" +
	"\x90\xad\x14\x7d\xc8\x84\x9c\x8e\xde\xe5\xfb\x05\x4d\xae\xe9\x0a\x48\x4e\x19\xf7\x7d\x96\x17\x42\x2a\x12\xfa\xde" +
	"\x76\x4b\xd8\x92\xc4\x9f\xf4\x83\x32\x7e\x9f\x2b\x52\x55\xc1\x32\x57\xc1\x76\x4b\x80\xa7\xa4\xaa\x06\x87\xce\x94" +
	"\x64\x7c\x55\xe2\xc1\xd2\x7c\xdc\x73\xf8\x9c\xe5\x80\x27\x15\xcb\xc1\x39\xe6\x7b\xc1\xd3\x54\x98\x26\x19\x0b\xba" +
	"\x6f\x15\xd7\xab\x29\x48\x29\x64\xd9\x23\xc8\x72\xfa\x6f\x90\x22\x13\xab\x69\x26\x56\x3d\x62\x59\x2c\x7f\xfa\xcb" +
	"\x34\x11\x0b\x49\x47\x29\xb7\xac\x00\xa9\x29\xa2\xb8\x5e\xc5\x8c\x4f\xd7\x3f\x73\xc1\xa7\x2b\xe0\x2a\x83\x9c\xf2" +
	"\xf8\xf6\xe7\xc0\x8f\x7c\x7f\xbb\x25\x29\x2c\x19\x07\x12\x14\x54\xd2\xbc\x0c\xac\xfe\x47\x44\x52\xbe\x02\x12\x7f" +
	"\x2d\x14\x13\x9c\x66\x27\x9a\xac\xa9\x9a\xcc\x96\x04\x6e\x48\x7c\xfe\x50\x00\x09\x16\x42\x64\x40\xb9\x79\xd9\xf3" +
	"\x92\x3c\x8d\xdf\x67\x74\x55\x86\x51\xfc\x46\x88\x2c\x44\xa3\xc5\xc7\xbf\x7d\xfa\x42\x8d\x21\x27\x64\x49\xb3\x12" +
	"\x26\x44\x13\xde\x42\x99\x48\xa6\xf9\x20\x31\xb2\x1c\x20\x2b\xa1\xcb\x86\x71\xf5\xd7\x5f\xc6\x98\x7c\x42\xc2\x08" +
	"\x97\x57\x4f\xe5\xb0\xcc\x04\xdd\xc1\xe3\xbd\x21\x8d\x71\x89\x0f\xe1\x33\xbc\xd1\xc4\xe0\xc8\x85\x41\xf0\xc8\x7d" +
	"\x4d\x98\x1e\xb5\xb1\xe8\xf8\xec\x0f\xca\x14\x48\xeb\xac\xa1\x33\xee\x28\x53\x47\x78\xbd\x39\xb7\xdb\x31\x96\x7e" +
	"\xb6\xc6\x44\x33\xfc\x3b\x2c\x93\x8c\xc5\x67\xa0\x8e\x37\xa5\x12\xb9\xe1\x91\xe4\x69\xe4\xfb\x1e\x5b\x12\x97\xef" +
	"\x47\x5a\xda\x8f\x64\xeb\x7b\x9e\x09\xb5\xf8\x0d\xe3\xe9\x49\xf3\x5a\x7d\x38\xf2\xbd\xca\x77\x92\x6c\xbb\x25\xcf" +
	"\x38\x8a\x37\x9b\x93\xd8\xca\xa9\x1f\xd2\x82\xe9\x67\x1f\x44\xef\xe9\xc9\x66\x91\xb1\x44\xd3\xcc\xc7\xf6\x84\x7f" +
	"\x4b\x25\xa9\x5f\xae\xaa\xb3\xcd\x22\x11\x79\x4e\x79\x4a\x30\x84\x7d\x7f\xb9\xe1\x89\x4b\x07\x79\x0b\x12\xc5\xbe" +
	"\xb8\xcc\x69\x71\x61\xa0\xe2\xd2\xfc\x83\xaa\x48\x50\x1b\xc9\xc7\xa8\x5b\xed\x2b\xeb\x91\x67\xa5\xbe\x48\x8b\x64" +
	"\xef\xb4\xf1\x30\xfa\x9e\xe7\x05\x69\xeb\xf9\x60\xa6\xbd\x61\xef\xe8\xc7\xc4\xc4\x9c\xdf\xc8\xac\x77\xee\xdb\xe9" +
	"\x6f\x0d\xbd\x9a\x18\x69\xea\xc0\xa9\x7c\x63\x58\x2b\xdd\x4a\x8a\x4d\x61\x6c\x89\x9f\x8c\x6c\x68\xa9\x24\x4f\xf5" +
	"\x13\xbc\x56\x1f\x6a\x8d\x4d\xe6\xe4\x47\x0d\x40\xf1\xb1\xb1\x20\x0a\xfe\xad\x04\x2b\x84\x39\xdd\x84\x95\xef\x79" +
	"\x3a\x8a\x3a\xd4\x26\xae\x90\xfc\x9b\xe0\xab\x19\xb9\x6a\xa9\xf8\x80\x54\xd5\xd5\x64\x18\x0f\x56\x6c\x51\x20\xac" +
	"\xa2\x1d\x50\xf4\xaf\xf5\x37\x23\xfe\x74\x4a\xba\xe1\x50\x55\x18\xd2\xad\xfc\xf8\xad\x96\xc0\xf7\x5c\xc7\x8f\xbf" +
	"\x10\x36\x8c\xe3\x53\xb8\xd9\x30\x09\x69\x83\x89\xdd\x9b\x8d\x23\x27\xa4\x11\xda\xc4\x3b\x79\xa1\x61\x39\xfe\x1d" +
	"\xff\xda\x0a\x73\x4c\xf9\x47\x7a\x0b\x6f\x44\xfa\x40\xaa\x6a\x42\x16\xf8\xc1\x06\x42\xfd\x76\x44\xc2\x17\x2d\x70" +
	"\x9f\x42\x59\x08\x8e\x29\x8a\x4c\x4f\x75\xfc\x69\xec\xc2\xd7\x75\x25\x31\x39\xb6\xa6\x3c\xcd\x40\x9e\x50\xb5\x46" +
	"\xf3\xe8\x7c\xfe\x68\x9e\xd5\x5e\xf1\x3d\xcc\xd3\xd1\x6c\xd0\x51\xe8\x5e\x61\x6e\x30\x89\x58\x55\x24\x20\x2f\x89" +
	"\x43\xf6\x3d\x0f\xf1\xc0\x6b\xc3\xdc\xa8\xfa\x01\x54\x0d\x72\x86\xa4\x21\x8c\x2d\x89\x3d\x38\x9f\x93\x20\x30\xcc" +
	"\xea\x27\x63\xd9\x77\xd1\xdc\xf6\x89\xab\xfa\xaa\x23\xc6\x53\xb8\x0f\xa2\xcb\x0b\x1d\xfc\x97\xb5\x0c\x1b\x99\xa1" +
	"\x00\xe6\xd0\x4b\xad\xb7\xd6\x00\x15\xb6\xf8\x69\xe3\x87\x4d\xc8\x33\xed\x1a\x1d\x3f\x03\xa7\xa2\x54\x6d\xa5\x33" +
	"\x27\xe3\x4f\x1c\x2b\xa5\x5a\xd7\x15\x42\xb3\x9b\x5b\x97\x95\xf1\x29\x14\x19\x4d\x20\xdc\xc8\x4c\x63\xe8\xd5\xf6" +
	"\x4a\x47\x87\x7d\xdb\x5a\x7e\xbb\xbd\xaa\xae\x34\xda\xb6\xa4\x26\x7c\x26\xe4\xa7\xa8\x66\x5d\xe7\x6b\x17\x76\x3d" +
	"\x09\x37\x28\x32\xc2\xef\x71\xc6\x80\xab\x18\xb5\xfc\x0c\x6a\x2d\xf0\x48\x18\x61\xf2\xa3\x0c\x91\xdf\x41\xa1\x83" +
	"\x14\x1e\xea\x7b\xb3\x01\xf9\xd0\x28\x8c\xcc\xe7\x44\xc2\x4d\xfc\x3a\x4d\xff\x81\x24\x53\xc1\xda\x12\x32\xa2\x94" +
	"\xd5\xc8\xad\xb8\x0e\x83\x35\xd0\x14\xe4\x38\x87\x8f\x9a\xf6\x14\x16\xad\xcd\x1c\x93\x3d\xd2\xd1\x78\xdd\x0c\x9e" +
	"\xcd\x89\xad\x51\x1f\x40\x21\x49\x67\xd8\x9f\x44\x31\x95\x69\x2c\xe8\xd7\x6c\xcd\xdc\x24\x93\x73\xcd\x0f\x3a\x9a" +
	"\xf5\xcb\x5f\x58\xa6\x41\x47\x2b\xe8\xf4\x4f\x43\xfb\x1e\x60\xe0\x65\xae\xe2\xb3\x42\x32\xae\x96\x61\xf0\xfc\xd6" +
	"\xd8\xc3\xb1\x44\xd4\x70\x71\x3b\x9c\x11\x4b\x1f\x62\xea\x27\x30\xab\x2d\xef\x0d\x43\x76\x14\xef\xac\xd1\x34\xe8" +
	"\xfd\xd0\x42\xc1\xb8\x54\xc7\x82\x2b\xe0\xea\x08\xad\x59\xf7\x47\x9f\x21\x65\xd4\xa2\x5f\x80\xed\x4d\xfa\x60\xf1" +
	"\x06\xef\x8c\x5a\x51\x1c\x49\x30\x6b\x0c\x10\xbe\x81\xa5\x90\x10\x3a\x38\x36\xb1\x6e\x9f\x20\xf3\xc8\xa4\x5a\x59" +
	"\x68\x5c\xc5\x98\x40\x89\xde\x8a\xd0\x62\x18\x3e\xfc\x61\x4e\x38\xcb\x8c\xd8\xb6\x17\xe0\x2c\x9b\x98\x3f\xa6\xaf" +
	"\x8f\xff\x90\xb4\x08\x41\xca\x09\x09\x30\xe5\xa0\x54\x64\x49\x59\x06\xa9\x8e\x1a\x2d\x13\xd6\xda\x14\x12\x91\x42" +
	"\x3a\x84\x75\xdf\xb0\x43\x49\xe2\x33\x45\xd5\xa6\xd4\xd3\xd7\xaf\xe4\x97\x57\xaf\x0c\x67\x2b\x8c\x85\x84\x6f\x3c" +
	"\xa7\xb2\x5c\xd3\xac\x2e\x15\xa1\x51\xe2\x47\xcb\x21\xfa\xdb\x40\xf4\x43\x64\x6f\xae\xcd\xb0\xf7\x91\xf6\x6e\x57" +
	"\x15\x6d\xeb\xca\xc4\xdc\x5e\x8b\xbc\xc3\x7f\x96\x61\xf0\xf1\xfc\xfc\x84\x3c\x4f\x67\xe4\x79\x19\x4c\xfa\x0a\x36" +
	"\x0f\xb4\x3f\xa3\xc6\x56\x74\xa9\xa0\xd1\xd5\x38\xf2\x35\x3e\xda\xe5\x47\x54\xbd\xd6\xdc\x58\xd2\xdc\xe0\xea\x5f" +
	"\xdb\x7e\x6e\x68\x26\x58\x39\x74\x1c\x81\xd3\x07\xc8\x25\x4d\x60\x5b\x61\x02\xc5\xe1\xc0\x53\x91\x0b\x3f\x16\xa9" +
	"\xb5\x05\x3a\x52\x68\x5b\xec\x6c\x6a\xee\x74\xcf\xad\x01\xda\x6d\xe3\x9f\xd4\x9f\x34\xad\xd0\xff\xa2\x53\x89\x8c" +
	"\xd7\xb4\xa1\xa8\x52\x90\x17\x0a\xa5\x7b\xe5\x7b\xde\x52\x48\x52\x3f\xfa\x55\x4b\x67\xa4\x8f\x5f\x9b\x87\x65\x03" +
	"\x79\xf6\xd4\xcb\x97\xbe\x89\x8b\x8e\x39\x6c\xec\x8e\x69\xd7\x6a\xf2\xdf\xe8\x39\x50\x30\x72\xb2\x66\x2c\x0f\x86" +
	"\xd1\x7f\x2c\x36\x59\x4a\xb8\x50\x24\xa1\x59\x46\xac\x97\x9a\x0e\xb4\x8e\x7f\xfc\x8b\xc9\x4c\x13\xb5\xa1\x19\x71" +
	"\x42\xa6\xa6\xe4\x54\x25\x6b\x33\x6d\x78\x6e\x6d\xd6\xcf\xad\xe3\x3f\x9b\xcf\x75\x6d\xf2\xcc\x6d\xc6\x50\x26\xee" +
	"\x3f\x80\xd2\x87\x7e\xa7\xd9\xc6\xe4\x77\xac\xf1\xf1\x5e\x59\x64\x3c\x83\x0c\x12\xd3\x5c\xd7\xa5\xec\x75\x96\x9d" +
	"\x81\x52\xd8\xa7\x84\x51\x27\x27\xc6\x6d\x71\x88\x31\x56\xa0\x48\x2d\xf9\x2d\xca\x62\x0c\x61\x2d\xe1\x69\x92\x2b" +
	"\xb7\x16\xda\x54\x98\x73\x04\x42\x2d\xdf\xc5\xe5\xe2\x41\x81\x4e\xa7\x77\xf7\x05\x24\x0a\x52\xf2\x27\x31\x25\x87" +
	"\x04\xcf\x6f\x30\xdb\xa2\x89\xb5\xe9\xf7\xc8\xfb\x87\x95\xd0\xd8\x1e\x11\x6b\x23\x1b\x49\x9b\x1a\x69\xa8\xf6\xae" +
	"\xa6\x0f\xd2\x88\x04\x24\xa8\xdf\x6a\x4a\x67\x8f\x5d\x8d\x69\x26\x69\x49\x42\x39\xda\x47\x02\x4d\xd6\x24\x85\x12" +
	"\x83\x93\x94\xfa\xaa\x05\x24\x74\x53\x02\x79\x5e\x12\x56\x1a\xe8\x1b\xb8\x6c\xbf\x2d\x1a\x11\x9d\xc5\x82\xe7\x79" +
	"\x0b\x09\xf4\xba\xa5\x35\xd5\xd8\xab\xba\xad\x11\x7e\x53\x2c\x87\xf8\x2c\x03\x28\x42\xb3\x68\xc8\x28\x56\xe4\x17" +
	"\xe6\x39\x24\x82\xa7\x0d\xe2\x22\x64\xda\x2c\xff\xfb\x7c\x6f\x9a\x77\x4d\xf2\x05\xee\xc2\xe0\x33\xbd\x67\xf9\x26" +
	"\xaf\x6f\x28\x09\xdc\x27\x00\xa9\x5b\xfd\xda\x32\xd1\x43\xc5\xde\x34\x7e\x0a\x2b\x56\x22\xd2\x97\xdd\xb1\x5d\x0f" +
	"\x3c\x52\x08\x55\x57\x85\x53\x21\x94\x59\x42\x94\xdd\x91\x46\x1f\x1a\x1b\x5c\x9d\xc9\x95\x3b\x33\xab\x3b\xb4\xc6" +
	"\xe7\xb6\xf9\x33\x14\x33\xaf\x9a\x98\x96\xd7\xa9\xb8\xe3\xe1\xe8\xca\x66\xe2\x37\x3d\xc8\x70\xcc\x9a\x13\x25\x37" +
	"\xe0\xbb\x45\xb3\x96\xdf\xce\xa6\xf3\x1e\x6f\xf7\x84\x9e\x90\xe7\x07\xc8\xe0\x7b\x66\x41\xb4\x77\xde\xb7\x21\x6f" +
	"\xa7\xef\x13\x2a\x81\xab\x76\x69\xd5\x5b\x03\x18\x72\x8b\xb0\xd8\xa8\x59\x73\x86\x7b\x96\x06\x91\xdf\x0f\x5b\xf4" +
	"\xc8\x13\x5f\x6e\x77\xb4\xce\xee\x4b\x77\x97\x9d\xbd\x17\xc6\x28\xea\xb8\xd3\xd9\x78\xa0\xeb\x65\x7c\x9f\xe8\xa2" +
	"\x46\x12\x90\x8a\x32\x4e\xe0\x16\xcd\x20\x64\x93\xbb\xd8\x32\x12\x13\xb1\x8c\xaf\xdc\x58\x08\xde\x64\x22\xb9\xc6" +
	"\x00\x87\x64\xa3\x6d\x8f\x2e\xde\x94\x50\x92\x42\x98\xae\x49\x09\x52\x80\x64\x22\x65\x58\x45\x1e\x48\xb2\x86\xe4" +
	"\xfa\x3b\x38\x56\xfe\xd0\x72\xa8\x4e\x6f\xde\xdb\xd1\x4b\x78\xa6\x9b\xb0\xcb\xb8\x7a\x1d\xd7\x4e\xed\x98\xb7\x06" +
	"\x63\x92\x3c\xdd\x61\x42\x27\x63\xe2\x6f\x65\x9b\x16\xcd\x70\x13\xbf\xce\x18\x45\xdd\x1b\x78\xb2\x0f\x66\xe4\xa2" +
	"\xb3\xea\xf2\x3a\xc3\xd9\xe0\x2d\xcf\xd3\x3c\x1c\x06\xfd\x61\xa3\xde\x6f\x8d\x10\xdc\xf4\xed\x6c\x9b\xf6\x24\xb0" +
	"\xdd\x3b\x99\xcc\x45\xb1\xe5\xaa\x9c\x11\x63\x81\xcf\x8c\x23\x98\x7d\xc1\x67\x88\x9b\x19\xf0\xbd\x5d\x48\x7d\xc7" +
	"\xe9\x86\xcf\x08\x1a\x1d\xe3\x9b\xbc\xe8\x98\x73\x42\xa8\x5c\x95\x8d\x51\x6a\xa7\xb8\x5d\xfd\x81\x7d\xdf\xb3\xfb" +
	"\xce\x7c\xbf\x47\x2e\xe4\x78\x81\xb7\xde\x93\xaa\xba\x1c\xb6\x47\x23\x13\x82\xe7\x79\x99\x58\xc5\xef\xa9\xa2\x59" +
	"\x18\x61\xb9\xc3\xe2\x1a\xc5\x9f\xcb\x55\x18\xe8\xe2\xa7\x9b\x22\x8c\xd0\xa8\xf6\x8a\xef\x3a\xc7\x7c\xc3\x33\xbd" +
	"\x7c\x8f\x7c\x3b\x41\x12\xac\x10\x99\xae\xb6\xf5\x8f\x11\xad\x12\xf5\x64\x19\xee\x87\x81\x43\x56\x83\xdd\xf0\x1f" +
	"\x8f\xfe\xba\x5d\x83\x7b\x9a\x17\x19\x94\xb6\x55\xf6\xbb\x4d\x1b\xdc\xeb\xfb\xdf\xd5\x87\x6c\xdc\x35\x2f\xbd\x9c" +
	"\x93\x80\xe8\x65\x59\x03\xda\x56\x71\x9c\x52\xc2\x88\xbc\x24\x81\xf6\x6e\x23\xaf\x4d\x26\xfd\x10\xd0\x3b\xff\xe4" +
	"\xc1\xb0\x7a\xef\xc9\xcb\x1d\x69\xb9\x2b\x2b\x77\x26\xe5\xde\x9c\x1c\xa4\x64\x3f\xf1\xaa\xc9\xc8\x56\x60\x5f\x3a" +
	"\x1e\x98\x8d\xb5\x1a\x1f\x59\x9a\x02\x6f\xd8\x99\xaf\x33\xdd\x36\x35\xa4\x51\x11\xac\xab\x66\x8d\x63\xcd\xa9\x47" +
	"\x93\x7c\x57\x6a\x7f\x4f\x66\xd7\x4a\x0c\x97\x21\x9e\xb7\x10\xe9\xc3\xc4\x9d\xe6\x3f\x80\xc2\x03\xe1\x70\xdf\x61" +
	"\xae\xbf\x18\x97\xb0\xaa\x66\x97\x36\x0f\x47\x7b\xe5\x3d\xc9\xfc\x8d\xd3\x45\x06\x58\xab\xb0\xbb\x47\x81\xea\x8c" +
	"\xae\x06\x28\xeb\x36\xcb\xf1\x17\x80\xb4\xac\x97\x0e\xa4\xaa\x70\x2c\x69\xab\xfd\xbf\x9a\x10\x3e\x6c\xf4\x7b\x1c" +
	"\xe0\x9e\x0a\x6b\x7b\x76\xee\xed\xb2\xfd\xfb\x6c\x66\x00\x30\xb1\xcb\x91\xde\x58\xd8\x8c\x43\xbd\x45\xcd\x7b\x21" +
	"\x73\x6c\x8b\xa5\xfd\x14\xee\x59\xd0\xec\x63\x6e\xef\x41\xce\xee\x36\xa6\x65\x3b\xd6\x1e\x99\x09\xe6\xe6\xa4\x41" +
	"\xbf\xb1\x29\xd1\x6f\xd2\x7b\x74\x85\xec\xc0\xd6\xe8\x32\xb9\xc3\xe3\x22\x18\xec\xc1\x83\x4b\x32\x6f\x82\xf8\x19" +
	"\xf6\xc6\x97\x2d\xc3\x4e\x84\xed\x19\xaa\x47\xe3\x71\xfc\xa7\x50\xeb\x82\x76\xb5\xfb\xe8\xef\xa1\x6d\x35\xf6\xee" +
	"\x76\x17\x8a\x2e\x4f\x1d\xa5\xa5\x1e\xe6\x84\x69\xbe\x10\x49\xdc\x8e\xe6\xe9\xf3\x7c\x7b\x9f\x4e\xfc\xc6\xa8\xbd" +
	"\x31\x7e\x77\xe8\xee\x0d\xa0\xc7\xe7\x79\x37\x9a\x50\x01\xb9\xaa\xd3\x0c\x15\x1c\xae\x88\xdd\x59\x7d\xcc\x43\xdd" +
	"\xdf\x61\xd2\xbe\xc1\x06\x51\xf4\xff\x6f\x32\x1b\x3e\xf1\x19\x28\x8d\xe5\xcf\x58\x6a\x41\xfc\x51\x53\xed\x6f\x04" +
	"\x6d\xd0\xee\x82\xcb\xb1\x40\x74\xdc\xe7\x80\xe4\xdd\xde\xe6\x6f\x8f\x2d\xec\xca\x43\x4f\xfd\xad\xf2\x55\xb7\x0b" +
	"\xec\xd5\x61\x53\x9d\x9d\xb1\xb3\x85\x12\x3d\xff\x39\xff\x5d\x02\xfb\x98\xe1\x2f\x6c\x96\x32\x21\xc1\x51\xb7\x81" +
	"\xfa\xd0\xfd\xe5\x59\xff\x67\x0a\xf3\x8b\x9a\x3b\x5b\xf6\xcf\xef\x9a\x64\x0f\x9a\x58\xa3\xfe\x6f\x0c\x3b\x9a\x59" +
	"\xbb\x18\x0e\x23\xb7\x6d\xad\xfc\xff\x04\x00\x00\xff\xff\x5f\x18\xa0\xd4\x50\x25\x00\x00")

func bindataTemplatesCommandstmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesCommandstmpl,
		"templates/commands.tmpl",
	)
}



func bindataTemplatesCommandstmpl() (*asset, error) {
	bytes, err := bindataTemplatesCommandstmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/commands.tmpl",
		size: 9552,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1580476310, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataTemplatesMaintmpl = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8e\x41\x4b\xc3\x40\x10\x85\xcf\x3b\xbf\x62\xc8\x41\x12\xb0\x9b\x7a" +
	"\xed\xad\x68\x0e\x5e\xac\x88\x78\x5f\x37\x93\xed\x60\x76\x66\xd9\x6c\x4a\x25\xe4\xbf\x4b\x2a\xe2\xed\xbd\xf7\xf1" +
	"\x1e\x2f\x39\xff\xe5\x02\x61\x74\x2c\x00\x1c\x93\xe6\x82\x35\x98\x2a\x70\x39\xcf\x9f\xd6\x6b\x6c\x7b\x27\x4c\x63" +
	"\x28\xee\x7b\xd4\xdc\x6a\x22\x71\x89\x77\x7e\xe4\x5d\x20\xa1\xec\x8a\xe6\xd6\x8f\x5c\x41\x03\x30\xcc\xe2\x6f\x63" +
	"\x75\x83\x0b\x18\x3f\xb2\x7d\x16\x2e\xf5\xdd\xa6\x1e\x55\x06\x0e\x0b\x18\x73\x4c\xe9\xc5\x45\x3a\x20\x62\xb5\x2c" +
	"\x68\x37\x83\xeb\x5a\xdd\x83\x31\x9d\x5c\x5e\x33\x0d\x7c\x3d\xfc\xb3\x4e\x2e\x7f\xf8\x83\xf2\xc4\x2a\xb7\xea\x83" +
	"\xdd\xdb\xfd\x96\xae\x0d\x80\x69\x5b\x7c\x3f\x3d\x9d\x0e\x78\xec\x7b\xcc\x14\x78\x2a\x94\xd1\x6b\x8c\x4e\xfa\x09" +
	"\xcf\x94\xc9\xc2\xef\xa7\x37\xd5\x62\xbb\x2b\xf9\xb9\x50\xdd\xc0\x0a\x3f\x01\x00\x00\xff\xff\xd7\x90\x9c\xb4\x08" +
	"\x01\x00\x00")

func bindataTemplatesMaintmplBytes() ([]byte, error) {
	return bindataRead(
		_bindataTemplatesMaintmpl,
		"templates/main.tmpl",
	)
}



func bindataTemplatesMaintmpl() (*asset, error) {
	bytes, err := bindataTemplatesMaintmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "templates/main.tmpl",
		size: 264,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1577703579, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"templates/commands.tmpl": bindataTemplatesCommandstmpl,
	"templates/main.tmpl":     bindataTemplatesMaintmpl,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"templates": {Func: nil, Children: map[string]*bintree{
		"commands.tmpl": {Func: bindataTemplatesCommandstmpl, Children: map[string]*bintree{}},
		"main.tmpl": {Func: bindataTemplatesMaintmpl, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
