// Code generated by openapi-cli-generator. DO NOT EDIT.
// See https://github.com/danielgtaylor/openapi-cli-generator

package main

import (
	{{ if .Imports.Fmt }}"fmt"{{ end }}
	{{ if .Imports.Strings }}"strings"{{ end }}
	{{ if .Imports.Time }}"time"{{ end }}

	"github.com/danielgtaylor/openapi-cli-generator/cli"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"gopkg.in/h2non/gentleman.v2"
)

{{ define "params" }}
	{{- range .OptionalParams }}
		{{- if eq .Type "boolean" }}
			cmd.Flags().Bool("{{ .CLIName }}", false, "{{ .Description }}")
		{{- else if eq .Type "int64" }}
			cmd.Flags().Int64("{{ .CLIName }}", 0, "{{ .Description }}")
		{{- else if eq .Type "float64" }}
			cmd.Flags().Float64("{{ .CLIName }}", 0.0, "{{ .Description }}")
		{{- else }}
			cmd.Flags().String("{{ .CLIName }}", "", "{{ .Description }}")
		{{- end }}
	{{- end }}

	{{- range .Waiters }}
		cmd.Flags().Bool("wait-{{ .Waiter.CLIName }}", false, "{{ .Waiter.Short }}")
	{{- end }}

	cli.SetCustomFlags(cmd)

	if cmd.Flags().HasFlags() {
		params.BindPFlags(cmd.Flags())
	}
{{ end }}

{{ $name := .Name }}
{{ $api := .GoName }}
{{ $apiPublic := .PublicGoName }}

var {{ $api }}Subcommand bool

func {{ $api }}Servers() []map[string]string {
	return []map[string]string{
		{{ range $server := .Servers }}
			map[string]string{
				"description": "{{ $server.Description }}",
				"url": "{{ $server.URL }}",
			},
		{{ end }}
	}
}

{{ range $group := .Groups }}
	var cmdGroup{{ $group.GoName }} = &cobra.Command{
		Use: "{{ $group.Name }}",
		Short: "{{ $group.Short }}",
		Long: `{{ $group.Long }}`,
	}
{{ end }}

{{ range $operation := .Operations }}
	// {{ $apiPublic }}{{ .GoName }} {{ .Short }}
	func {{ $apiPublic }}{{ .GoName }}({{ range .RequiredParams }}{{ .GoName }} string, {{ end }}params *viper.Viper{{ if .CanHaveBody }}, body string{{ end }}) (*gentleman.Response, {{ .ReturnType }}, error) {
		handlerPath := "{{ .HandlerName }}"
		if {{ $api }}Subcommand {
			handlerPath = "{{ $name }} " + handlerPath
		}

		server := viper.GetString("server")
		if server == "" {
			server = {{ $api }}Servers()[viper.GetInt("server-index")]["url"]
		}

		url := server+"{{ .Path }}"

		{{- range $i, $param := .RequiredParams }}
			{{- if eq $param.In "path" }}
				url = strings.Replace(url, "{{`{`}}{{ $param.Name }}{{`}`}}", {{ $param.GoName }}, 1)
			{{- end }}
		{{- end }}

		req := cli.Client.{{ .Method }}().URL(url)

		{{ range $i, $param := .RequiredParams }}
			{{ if eq $param.In "query" }}
				req = req.AddQuery("{{ .Name }}", {{ $param.GoName }})
			{{ else if eq $param.In "header" }}
				req = req.AddHeader("{{ .Name }}", {{ $param.GoName }})
			{{ end }}
		{{ end }}

		{{- range .OptionalParams }}
			{{ .GoName }} := params.Get{{ .Type | title }}("{{ .CLIName }}")
			if {{ .GoName }} != {{ .TypeNil }} {
				{{- if eq .In "query" }}
					req = req.AddQuery("{{ .Name }}", fmt.Sprintf("%v", {{ .GoName }}))
				{{- else if eq .In "header" }}
					req = req.AddHeader("{{ .Name }}", fmt.Sprintf("%v", {{ .GoName }}))
				{{- end }}
			}
		{{- end }}

		{{ if .CanHaveBody }}
			if body != "" {
				req = req.AddHeader("Content-Type", "{{ .MediaType }}").BodyString(body)
			}
		{{ end }}

		cli.HandleBefore(handlerPath, params, req)

		resp, err := req.Do()
		if err != nil {
			return nil, nil, errors.Wrap(err, "Request failed")
		}

		var decoded {{ .ReturnType }}

		if resp.StatusCode < 400 {
			if err := cli.UnmarshalResponse(resp, &decoded); err != nil {
				return nil, nil, errors.Wrap(err, "Unmarshalling response failed")
			}
		} else {
			return nil, nil, errors.Errorf("HTTP %d: %s", resp.StatusCode, resp.String())
		}

		after := cli.HandleAfter(handlerPath, params, resp, decoded)
		if after != nil {
			decoded = after{{ if ne .ReturnType "interface{}" }}.({{ .ReturnType }}){{ end }}
		}

		return resp, decoded, nil
	}
{{ end }}

{{ range $waiter := .Waiters }}
	func {{ $apiPublic }}{{ .GoName }}({{ range .Operation.RequiredParams }}{{ .GoName }} string, {{ end }}params *viper.Viper) error {
		attempt := 0
		for attempt < {{ $waiter.Attempts }} {
			attempt++

			resp, decoded, err := {{ $apiPublic }}{{ .Operation.GoName }}({{ range .Operation.RequiredParams }}{{ .GoName }}, {{ end }}params)
			if err != nil {
				return errors.Wrap(err, "Could not call waiter operation")
			}

			var actual interface{}
			var match bool
			{{ range $matcher := .Matchers }}
				actual, err = cli.GetMatchValue(resp.Context, "{{ .Select }}", params.AllSettings(), decoded)
				if err != nil {
					return errors.Wrap(err, "Could not get matcher value")
				}

				match, err = cli.Match("{{ .Test }}", []byte({{ .Expected | printf "%q" }}), actual)
				if err != nil {
					return errors.Wrap(err, "Watcher match failure")
				} else if match {
					{{ if eq .State "failure" }}
						return errors.Errorf("Waiter cannot reach desired state because %s is %s", "{{ .Select }}", {{ .Expected | printf "%q" }})
					{{ else }}
						break
					{{ end }}
				}
			{{ end }}

			time.Sleep({{ .Delay }}*time.Second)
		}

		if attempt >= {{ $waiter.Attempts }} {
			return errors.New("Maximum attempts exceeded")
		}

		return nil
	}
{{ end }}

func {{ $api }}Register(subcommand bool) {
	root := cli.Root

	if subcommand {
		root = &cobra.Command{
			Use: "{{ $name }}",
			Short: "{{ .Title }}",
			Long: cli.Markdown("{{ .Description }}"),
		}
		{{ $api }}Subcommand = true
	} else {
		cli.Root.Short = "{{ .Title }}"
		cli.Root.Long = cli.Markdown("{{ .Description }}")
	}

	{{ range $group := .Groups }}
		{{ if $group.Parent }}
			cmdGroup{{ $group.Parent.GoName }}.AddCommand(cmdGroup{{ $group.GoName }})
		{{ else }}
			root.AddCommand(cmdGroup{{ $group.GoName }})
		{{ end }}
	{{ end }}

	{{ if .Waiters }}
		wait := &cobra.Command{
			Use: "wait",
			Short: "Wait for a certain event or state before returning",
			Long: "Blocks execution and uses polling to periodically check for a certain event or state before returning",
		}
		root.AddCommand(wait)

		{{ range $waiter := .Waiters }}
			func () {
				params := viper.New()
				cmd := &cobra.Command{
					Use: "{{ .Use }}",
					{{- if .Aliases }}
						Aliases: []string{
							{{- range .Aliases }}
								"{{ . }}",
							{{- end }}
						},
					{{- end }}
					Short: "{{ .Short }}",
					Long: cli.Markdown("{{ .Long }}"),
					Args: cobra.MinimumNArgs({{ len .Operation.RequiredParams }}),
					Run: func(cmd *cobra.Command, args []string) {
						if err := {{ $apiPublic }}{{ .GoName }}({{ range $x, $param := .Operation.RequiredParams }}args[{{ $x }}], {{ end }}params); err != nil {
							log.Fatal().Err(err).Msg("Error waiting")
						}
					},
				}
				wait.AddCommand(cmd)

				{{ template "params" .Operation }}
			}()
		{{ end }}
	{{ end }}

	{{ range $operation := .Operations }}
		func () {
			params := viper.New()

			var examples string

			{{ range $ex := .Examples }}
				examples += "  " + cli.Root.CommandPath() + " {{ $operation.Use }} {{ $ex }}\n"
			{{ end }}

			cmd := &cobra.Command{
				Use: "{{ .Use }}",
				{{- if .Aliases }}
					Aliases: []string{
						{{- range .Aliases }}
							"{{ . }}",
						{{- end }}
					},
				{{- end }}
				Short: "{{ .Short }}",
				Long: cli.Markdown("{{ .Long }}"),
				{{- if .Hidden }}
					Hidden: {{ .Hidden }},
				{{- end }}
				Example: examples,
				Args: cobra.MinimumNArgs({{ len .RequiredParams }}),
				Run: func(cmd *cobra.Command, args []string) {
					{{- if .CanHaveBody }}
					body, err := cli.GetBody("{{ .MediaType }}", args[{{ len .RequiredParams}}:])
					if err != nil {
						log.Fatal().Err(err).Msg("Unable to get body")
					}
					{{- end }}

					{{ if .NeedsResponse }}resp{{ else }}_{{ end }}, decoded, err := {{ $apiPublic }}{{ .GoName }}({{ range $x, $param := .RequiredParams }}args[{{ $x }}], {{ end }}params{{ if .CanHaveBody }}, body{{ end }})
					if err != nil {
						log.Fatal().Err(err).Msg("Error calling operation")
					}

					if err := cli.Formatter.Format(decoded); err != nil {
						log.Fatal().Err(err).Msg("Formatting failed")
					}

					{{ if .Waiters }}
						reqParams := params.AllSettings()

						{{ range $i, $param := $operation.RequiredParams }}
							reqParams["{{ $param.Name }}"] = args[{{ $i }}]
						{{ end }}

						var actual interface{}
					{{- end }}

					{{- range .Waiters }}
						if params.GetBool("wait-{{ .Waiter.CLIName }}") {
							wparams := viper.New()

							{{- range $x, $selector := .Args }}
								actual, err = cli.GetMatchValue(resp.Context, "{{ $selector }}", reqParams, decoded)
								if err != nil {
									log.Fatal().Err(err).Msg("Could not get matcher value")
								}

								arg{{ $x }} := fmt.Sprintf("%v", actual)
							{{- end }}

							{{- range $id, $selector := .Params }}
								actual, err = cli.GetMatchValue(resp.Context, "{{ $selector }}", reqParams, decoded)
								if err != nil {
									log.Fatal().Err(err).Msg("Could not get matcher value")
								}

								wparams.Set("{{ $id }}", actual)
							{{- end }}

							if err := {{ $apiPublic }}{{ .Waiter.GoName }}({{ range $x, $selector := .Args }}arg{{ $x }}, {{ end }}wparams); err != nil {
								log.Fatal().Err(err).Msg("Waiter error")
							}
						}
					{{- end }}
				},
			}
		{{ if $operation.Group }}
			cmd.Use = strings.Replace(cmd.Use, "-{{ $operation.Group.Name }}", "", 1)
			cmdGroup{{ $operation.Group.GoName }}.AddCommand(cmd)
		{{ else }}
			root.AddCommand(cmd)
		{{ end }}

			{{ template "params" . }}
		}()
	{{ end }}
}
